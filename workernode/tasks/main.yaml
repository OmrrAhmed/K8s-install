#Disable Firewall
- name: Allow everything and enable UFW
  ufw:
    state: disabled
  register: ufw_status

#print UFW Status
- name: UFW Status
  debug:
    var: ufw_status

#Update and upgrade the system
- name: Update And Upgrade
  apt:
    update_cache: yes
    state: present
    allow_unauthenticated: true

#Enable time-sync with an NTP server
- name: install & Enable Time-sync
  apt:
    name: systemd-timesyncd
    state: present

#Set NTP True
- name: set NTP true
  command: timedatectl set-ntp true
  register: NTP_Status

#NTP Status
- name: NTP Status
  debug:
    var: NTP_Status

#Trun Off Swap
- name: Trun Swap Off
  command: "{{ item }}"
  with_items:
   - sudo swapoff -a
   - sudo sed -i.bak -r 's/(.+ swap .+)/#\1/' /etc/fstab
#Check the status with free -m command
- name: Check the status with free -m command
  command: free -m
  register: printstatus

#print status 
- name: check the status with free -m
  debug:
    var: printstatus


#Configure required kernel modules 
- name: Create a file named k8s.conf in /etc/modules-load.d
  ansible.builtin.copy:
    dest: /etc/modules-load.d/k8s.conf
    content:
      overlay
      br_netfilter
    owner: root
    group: root
    mode: '0644'

#Load above modules to the current session
- name: Load modules to the current session
  command: "{{ item }}"
  with_items:
    - sudo modprobe overlay
    - sudo modprobe br_netfilter

# #Check the status
# - name: check the status
#   command: lsmod | grep "overlay\|br_netfilter"
#   register: checklsmod

# #print the status
# - name: check lsmod
#   debug:
#     var: checklsmod

- name: Create k8s.conf file in /etc/sysctl.d
  ansible.builtin.copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |

        net.bridge.bridge-nf-call-ip6tables = 1 \
        net.bridge.bridge-nf-call-iptables = 1 \
        net.ipv4.ip_forward = 1 \

    owner: root
    group: root
    mode: '0644'

- name: Apply newly added network params
  command: sysctl --system


#Install necessary software tools to continue
- name: Install necessary software tools to continue
  apt:
    name: "{{ item }}"
    state: present
  with_items:
  - apt-transport-https
  - ca-certificates
  - curl
  - gpg
  - gnupg2
  - software-properties-common

#Create Directory
- name: Add Kubernetes repository and keys
  file:
    path: /etc/apt/keyrings
    state: directory
    owner: root
    group: root
    mode: '0755'


#Download and add the k8s repository key
- name: Download and add the k8s repository key
  ansible.builtin.shell: | 
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg > /dev/null
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg 


- name: Add Kubernetes repository in the source list
  ansible.builtin.shell: |
     echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
  args:
    creates: /etc/apt/sources.list.d/kubernetes.list
#Update and upgrade the system
- name: Update And Upgrade
  apt:
    update_cache: yes
    state: present
    allow_unauthenticated: true

#install kubectl kubeadm
- name: install kubelet kubeadm kubectl
  apt:
    name: "{{ item }}"
    state: present
  with_items:
  - kubelet
  - kubeadm
  - kubectl

#hold the updates for kubeadm
- name: hold the updates for kubeadm
  command: apt-mark hold kubelet kubeadm kubectl

# #make sure that kernel modules are loaded
# - name: make sure that kernel modules are loaded
#   command: lsmod | grep "overlay\|br_netfilter"

# Step 3: Create the /etc/apt/keyrings directory
- name: Create directory for Docker GPG key
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

# Step 4: Download Dockerâ€™s official GPG key
- name: Download Docker GPG key
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'

# Step 5: Add Docker repository to apt sources
- name: Add Docker apt repository
  shell: |
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
    $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

# Step 6: Update apt package index again after adding Docker repo
- name: Update apt package index after adding Docker repository
  apt:
    update_cache: yes

# Step 7: Install Docker packages
- name: Install Docker packages
  apt:
    name: containerd.io
    state: present
# Step 11: Enable and start Docker service
- name: Enable and start containerd service
  systemd:
    name: containerd
    enabled: yes
    state: started

# Step 12: Display success message for Docker installation
- name: Display containerd installation success message
  debug:
    msg: "containerd has been successfully installed and started. Please log out and log back in to apply the containerd group membership."
#Create Directroy for Containerd
- name: Create a directory to store containerd config file in /etc/
  file:
    path: /etc/containerd
    recurse: yes
    state: directory
    group: root
    owner: root

#Generate the default config toml file 
- name: Generate the default config toml file
  shell: |
    containerd config default| tee /etc/containerd/config.toml

#Change state from false to true in config toml file
- name: Change state from false to true in config toml file
  replace: 
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'

#restart container d
- name: Restart Containerd
  service: 
    name: containerd
    state: restarted

- name: Run Command containerd Status
  command: "systemctl status containerd"
  register: results

#print output Nginx Status
- name: Print Reuslts
  debug:
    var: results

#install cri-tools
- name: install cri-tools
  apt: 
    name: cri-tools
    state: present

  #Create crictl yaml file
- name: crictl.yaml file
  ansible.builtin.copy:
    dest: /etc/crictl.yaml
    content: |
      runtime-endpoint: unix:///run/containerd/containerd.sock
      image-endpoint: unix:///run/containerd/containerd.sock
      timeout: 2
      debug: false # <- if you don't want to see debug info you can set this to false
      pull-image-on-create: false
    owner: root
    group: root
    mode: '0644'

  #command for running images
- name: command for running images
  command: crictl ps
  register: printresult

 
#print output Nginx Status
- name: Print Reuslts
  debug:
    var: printresult

#restart container d
- name: Restart kubelet
  service:
    name: kubelet
    state: started


- name: Join node to the Kubernetes cluster
  shell: "{{ hostvars['controlplane']['join_command'].stdout }}"
  args:
    executable: /bin/bash

